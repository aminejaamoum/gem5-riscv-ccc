// -*- mode:c++ -*-

// Copyright (c) 2015 RISC-V Foundation
// Copyright (c) 2017 The University of Virginia
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Authors: Robert Scheffel

////////////////////////////////////////////////////////////////////
//
// The RISC-V ISA decoder
//

decode QUADRANT default Unknown::unknown() {
    0x3: decode OPCODE {
        0x00: decode FUNCT3 {
            format Load32 {
                0x0: lb({{
                    Rd_sw = Mem_sb;
                }});
                0x1: lh({{
                    Rd_sw = Mem_sh;
                }});
                0x2: lw({{
                    Rd_sw = Mem_sw;
                }});
                0x4: lbu({{
                    Rd_sw = Mem_ub;
                }});
                0x5: lhu({{
                    Rd_sw = Mem_uh;
                }});
            }
        }
        0x04: decode FUNCT3 {
            format I32Op {
                0x0: addi({{
                    Rd_sw = Rs1_sw + imm;
                }});
                0x1: slli({{
                    Rd_uw = Rs1_uw << SHAMT5;
                }});
                0x2: slti({{
                    Rd_uw = (Rs1_sw < imm) ? 1 : 0;
                }});
                0x3: sltiu({{
                    Rd_uw = (Rs1_uw < imm) ? 1 : 0;
                }}, uint32_t);
                0x4: xori({{
                    Rd_uw = Rs1_uw ^ imm;
                }}, uint32_t);
                0x5: decode SRTYPE {
                    0x0: srli({{
                        Rd_uw = Rs1 >> SHAMT5;
                    }});
                    0x1: srai({{
                        Rd_sw = Rs1_sw >> SHAMT5;
                    }});
                }
                0x6: ori({{
                    Rd_uw = Rs1_uw | imm;
                }}, uint32_t);
                0x7: andi({{
                    Rd_uw = Rs1_uw & imm;
                }}, uint32_t);
            }
        }
        0x05: U32Op::auipc({{
            Rd_uw = PC_uw + imm;
        }});
        0x0c: decode FUNCT3 {
            format R32Op {
                0x0: decode FUNCT7 {
                    0x0: add({{
                        Rd_sw = Rs1_sw + Rs2_sw;
                    }});
                    0x1: mul({{
                        Rd_sw = Rs1_sw * Rs2_sw;
                    }}, IntMultOp);
                    0x20: sub({{
                        Rd_sw = Rs1_sw - Rs2_sw;
                    }});
                }
                0x1: decode FUNCT7 {
                    0x0: sll({{
                        Rd_uw = Rs1_uw << Rs2<5:0>;
                    }});
                }
                0x2: decode FUNCT7 {
                    0x0: slt({{
                        Rd_uw = (Rs1_sw < Rs2_sw) ? 1 : 0;
                    }});
                }
                0x3: decode FUNCT7 {
                    0x0: sltu({{
                        Rd = (Rs1_uw < Rs2_uw) ? 1 : 0;
                    }});
                }
                0x4: decode FUNCT7 {
                    0x0: xor({{
                        Rd_uw = Rs1_uw ^ Rs2_uw;
                    }});
                }
                0x5: decode FUNCT7 {
                    0x0: srl({{
                        Rd_uw = Rs1_uw >> Rs2<5:0>;
                    }});
                    0x20: sra({{
                        Rd_sw = Rs1_sw >> Rs2<5:0>;
                    }});
                }
                0x6: decode FUNCT7 {
                    0x0: or({{
                        Rd_uw = Rs1_uw | Rs2_uw;
                    }});
                }
                0x7: decode FUNCT7 {
                    0x0: and({{
                        Rd_uw = Rs1_uw & Rs2_uw;
                    }});
                }
            }
        }
        0x0d: U32Op::lui({{
            Rd_uw = (uint32_t)imm;
        }});
        0x18: decode FUNCT3 {
            format B32Op {
                0x0: beq({{
                    if (Rs1_uw == Rs2_uw) {
                        NPC_uw = PC_uw + imm;
                    } else {
                        NPC_uw = NPC_uw;
                    }
                }}, IsDirectControl, IsCondControl);
                0x1: bne({{
                    if (Rs1_uw != Rs2_uw) {
                        NPC_uw = PC_uw + imm;
                    } else {
                        NPC_uw = NPC_uw;
                    }
                }}, IsDirectControl, IsCondControl);
                0x4: blt({{
                    if (Rs1_sw < Rs2_sw) {
                        NPC_uw = PC_uw + imm;
                    } else {
                        NPC_uw = NPC_uw;
                    }
                }}, IsDirectControl, IsCondControl);
                0x5: bge({{
                    if (Rs1_sw >= Rs2_sw) {
                        NPC_uw = PC_uw + imm;
                    } else {
                        NPC_uw = NPC_uw;
                    }
                }}, IsDirectControl, IsCondControl);
                0x6: bltu({{
                    if (Rs1_uw < Rs2_uw) {
                        NPC_uw = PC_uw + imm;
                    } else {
                        NPC_uw = NPC_uw;
                    }
                }}, IsDirectControl, IsCondControl);
                0x7: bgeu({{
                    if (Rs1_uw >= Rs2_uw) {
                        NPC_uw = PC_uw + imm;
                    } else {
                        NPC_uw = NPC_uw;
                    }
                }}, IsDirectControl, IsCondControl);
            }
        }
    }
}
